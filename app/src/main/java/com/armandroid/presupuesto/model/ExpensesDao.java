package com.armandroid.presupuesto.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.armandroid.presupuesto.model.Expenses;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPENSES".
*/
public class ExpensesDao extends AbstractDao<Expenses, Long> {

    public static final String TABLENAME = "EXPENSES";

    /**
     * Properties of entity Expenses.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "idExpense");
        public final static Property IdBudget = new Property(1, Integer.class, "idBudget", false, "ID_BUDGET");
        public final static Property IdCategory = new Property(2, Integer.class, "idCategory", false, "ID_CATEGORY");
        public final static Property IdTdc = new Property(3, Integer.class, "idTdc", false, "ID_TDC");
        public final static Property Mount = new Property(4, Float.class, "mount", false, "MOUNT");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Months = new Property(6, Integer.class, "months", false, "MONTHS");
    };


    public ExpensesDao(DaoConfig config) {
        super(config);
    }
    
    public ExpensesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPENSES\" (" + //
                "\"idExpense\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_BUDGET\" INTEGER," + // 1: idBudget
                "\"ID_CATEGORY\" INTEGER," + // 2: idCategory
                "\"ID_TDC\" INTEGER," + // 3: idTdc
                "\"MOUNT\" REAL," + // 4: mount
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"MONTHS\" INTEGER);"); // 6: months
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPENSES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Expenses entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idBudget = entity.getIdBudget();
        if (idBudget != null) {
            stmt.bindLong(2, idBudget);
        }
 
        Integer idCategory = entity.getIdCategory();
        if (idCategory != null) {
            stmt.bindLong(3, idCategory);
        }
 
        Integer idTdc = entity.getIdTdc();
        if (idTdc != null) {
            stmt.bindLong(4, idTdc);
        }
 
        Float mount = entity.getMount();
        if (mount != null) {
            stmt.bindDouble(5, mount);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Integer months = entity.getMonths();
        if (months != null) {
            stmt.bindLong(7, months);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Expenses readEntity(Cursor cursor, int offset) {
        Expenses entity = new Expenses( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idBudget
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // idCategory
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // idTdc
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // mount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // months
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Expenses entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdBudget(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdCategory(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIdTdc(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMount(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMonths(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Expenses entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Expenses entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
